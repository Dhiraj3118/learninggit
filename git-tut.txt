Version 1:

1) git status: gives the status of repository. If the folder is not git repository then it shows error. If the folder is git repo but it has some files untracked then they are shown in red font while those in the staging area are shown in green font. Even if the file is not staged after modification in git then this will show the file in red font. If added to staging area and then modified so git status will show two times the same file once in green and once in red font.
it shows all info which file is deleted, which file is renamed. if we rename some file then first we have to start tracking it using git add and then this command will show renamed file. otherwise it will show that we have deleted the file and added a new file which is not tracked.

2) git init: initializes empty git repository. Means this folder is made a git repository. It creates a folder named .git which is hidden.

3)git add --a: adds all the files to the staging area.
	{--a -> all}

  git add filename.exe: add the specific file to staging area.

4)git commit -m "msg" : commit the files in the staging area with the msg.
	{if we write only git commit then it will open an editor}
git commit -a -m "msg" : this will directly commit the files. no need to stage the files using add command. but the files 
which are untracked means added new to the repo they will not be commited. first we need to use git add command to start tracking them. then if we give this command so they will get commited. they don't have to be staged to commit stage. they can directly be commited

5)git log: shows all the commit done in the repo along with author and date
git -p -2: shows only 2 commits
git log -p: shows which lines were removed and which were added. it shows each and every changes done
git log -p -2: shows only 2 commits with each and every changes done
git log --stat: shows the commites in brief. +++-- means 3 insertions and 2 deletions
git log --pretty=oneline : shows every commmit in one line(shows the changes made only)
git log --pretty=short : shows commit with author.
git log --pretty=full : shows full detail about commits(message, author, commiter){author is the author of file and commiter is the one who made that commit}

git log --pretty=format:"%h -- %an"  :  this will show abbreivated(%h) hash commits with authorname(%an).
%H - full commit hash
%ae - author email
%cn - commiter name          and then there are many others

git log --since=2.days : shows commits made in last 2 days
git log --since=2.months : shows commits made in last 2 months
git log --since=2.years : shows commits made in last 2 years

6)rm -rf .git: this deletes the .git folder and so our repo will be no more a git repo.

7)git clone url name: this will clone the repo whose url we have used in the command. This url is mostly from github which provides us with option of clone repo and gives us the url. name is optional. Means if we give the name then the repo will be saved by that name else it will be cloned by the it's name on that url. Now if we do some commit in this cloned repo then in git status it will show how much commits we are ahead or back from the original repo.

8)touch filename: creates the file in the repo

touch .gitignore to make a file named .gitignore. In this file save the filenames which you don't want git to track.

9)git diff: it shows the difference in files of staging area and working directory. 

git diff --staged: this shows difference in files in last commit and staging area.

10)git rm abc.txt : removes the file from the repo. the changes are staged too.
git rm --cached abc.txt : this command will stop the tracking of the file. sometimes some files even after adding them to .gitignore are tracked and shown in sit status so we have to untrack them using this command. but yes this will show deleted in status even if it is not deleted. only its cache is deleted. now once we remove it from gitignore it will again be shown in status.

11)git mv abc.txt abcd.txt : this will rename the file abc.txt to abcd.txt. this stages the file too.